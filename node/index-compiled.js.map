{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["\n\n\"use strict\";\n\nvar database = { counter: 0, data: [] };\nconst port = process.env.PORT || 3000;\n\n/**\n * Database Emulation\n * \n * @class Data\n */\nclass Data {\n    /**\n     * Get Database\n     * \n     * @static\n     * @returns database\n     * \n     * @memberOf Data\n     */\n    static db() {\n        return database;\n    }\n\n    /**\n     * Get one item from database\n     * \n     * @static\n     * @param {number} id job sequence\n     * @returns database item\n     * \n     * @memberOf Data\n     */\n    static getOneItem(id) {\n        return database.data[id];\n    }\n\n    /**\n     * Add one job to database\n     * \n     * @static\n     * @param {any} object Job object\n     * @returns {void}\n     * @memberOf Data\n     */\n    static addOneItem(object) {\n        database.data[object.id] = object;\n    }\n\n    /**\n     * Store the result of the job.\n     * \n     * @static\n     * @param {any} object Result object\n     * \n     * @memberOf Data\n     */\n    static setResult(object) {\n        database.data[object.seq].result = object;\n    }\n\n    /**\n     * Set the delivery status of the item.\n     * \n     * @static\n     * @param {number} id Job seq\n     * @param {any} value Delivery status\n     * @returns {void}\n     * @memberOf Data\n     */\n    static setStatus(id, value) {\n        database.data[id].sent = value;\n    }\n\n    /**\n     * Clear the Database\n     * \n     * @static\n     * @returns {void}\n     * @memberOf Data\n     */\n    static reset() {\n        database = { counter: 0, data: [] };\n    }\n}\n\n/**\n * Common Tools\n * \n * @class Tool\n */\nclass Tool {\n    /**\n     * UUID Generator\n     * \n     * @static\n     * @returns {string} UUID\n     * \n     * @memberOf Tool\n     */\n    static uuid() {\n        return require(\"node-uuid\").v1();\n    }\n}\n\n/**\n * AMQP Access\n * \n * @class Rabbit\n */\nclass Rabbit {\n    /**\n     * Creates an instance of Rabbit.\n     * \n     * @returns {void}\n     * @memberOf Rabbit\n     */\n    constructor() {\n        this.AMQP = require(\"amqplib\");\n        this.AURI = process.env.AMQP_URI || \"amqp://localhost\";\n        this.target = \"in\";\n        this.listen = \"out\";\n    }\n\n    /**\n     * Publish message\n     * \n     * @param {any} msg message object\n     * @returns {void}\n     * @memberOf Rabbit\n     */\n    writeMessage(msg) {\n        const target = this.target;\n        Data.addOneItem(msg);\n        this.AMQP.connect(this.AURI).then(function(conn) {\n            return conn.createChannel().then(function(ch) {\n                const q = ch.assertQueue(target);\n                return q.then(function() {\n                    ch.sendToQueue(target, new Buffer.from(JSON.stringify(msg)), { correlationId: msg.uuid });\n                    console.log(\" [x] SENT @ %s\", msg.uuid);\n                    Data.setStatus(msg.id, true);\n                    return ch.close();\n                });\n            }).finally(function() {\n                conn.close();\n            });\n        }).catch(console.warn);\n    }\n\n    /**\n     * message receiver\n     * \n     * @returns {void}\n     * @memberOf Rabbit\n     */\n    receiveMessage() {\n        const listen = this.listen;\n        this.AMQP.connect(this.AURI).then(function(conn) {\n            process.once(\"SIGINT\", function() {\n                conn.close();\n            });\n            return conn.createChannel().then(function(ch) {\n                var q = ch.assertQueue(listen);\n                q = q.then(function() {\n                    ch.consume(listen, function(msg) {\n                        var msgContent = JSON.parse(msg.content.toString());\n                        console.log(\" [*] RECV @ %s\", msg.properties.correlationId.toString());\n                        return Data.setResult(msgContent);\n                    }, { noAck: true });\n                });\n                return q.then(function() {\n                    console.log(\" [!] Waiting for messages via HTTP API @ Port %s. To exit press CTRL+C\", port);\n                });\n            });\n        }).catch(console.warn);\n    }\n}\n\n/**\n * The API Core\n * \n * @class App\n */\nclass App {\n    /**\n     * Creates an instance of API.\n     * \n     * @param {number} port Port No.\n     * \n     * @memberOf App\n     */\n    constructor(port) {\n        const express = require(\"express\");\n        const bodyParser = require(\"body-parser\");\n        this.app = express();\n        this.app.use(bodyParser.json());\n        this.app.listen(port);\n    }\n\n    /**\n     * Start the API\n     * \n     * \n     * @memberOf App\n     */\n    start() {\n        const rabbit = new Rabbit();\n        rabbit.receiveMessage();\n\n        /**\n         * GET /clear\n         * Empty the database.\n         */\n        this.app.get(\"/clear\", function(req, res) {\n            Data.reset();\n            res.json(Data.db());\n        });\n\n        /**\n         * GET /history\n         * Get the list of jobs.\n         */\n        this.app.get(\"/history\", function(req, res) {\n            res.json(Data.db());\n        });\n\n        /** \n         * GET /history/:id\n         * Get the details of specific job \n         * @param {number} id The job seq\n         */\n        this.app.get(\"/history/:id\", function(req, res) {\n            res.json(Data.getOneItem(req.params.id));\n        });\n\n        /**\n         * POST /send\n         * Entry point of Job\n         * @param {string} task The task\n         * @param {string} payload The task payload\n         */\n        this.app.post(\"/send\", function(req, res) {\n            var task = req.body.task;\n            var payload = req.body.payload;\n            var message = { id: database.counter, task: task, payload: payload, uuid: Tool.uuid(), sent: false, result: {} };\n\n            res.json(message);\n            rabbit.writeMessage(message);\n            database.counter++;\n        });\n    }\n}\n\nconst app = new App(port);\napp.start();"]}