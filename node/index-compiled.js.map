{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["\n\"use strict\";\n\nvar database = { counter: 0, data: [] };\nconst port = process.env.PORT || 3000;\n\n/**\n * Data\n * To Access the imaginary JSON based database and some global data. It could be replaced by MongoDB.\n */\nclass Data {\n    static db() { return database; }                                            // Get Full DB\n    static getOneItem(id) { return database.data[id]; }                         // Get One item in DB\n    static addOneItem(object) { database.data[object.id] = object; }            // Add ONe Item in DB\n    static setResult(object) { database.data[object.seq].result = object; }     // Set Processed Result\n    static setStatus(id, value) { database.data[id].sent = value; }             // Set Delivery Status\n    static reset() { database = { counter: 0, data: [] }; }                     // Clean the Database\n    static uuid() { return require(\"node-uuid\").v1(); }                         // generate UUID\n    static targetQueue() { return \"in\"; }                                       // get Queue Name\n    static listenQueue() { return \"out\"; }                                      // Same.\n}\n\n/**\n * AMQP\n * Don't Touch.\n */\nclass Rabbit {\n    constructor () { \n        this.amqp = require(\"amqplib\").connect(\"amqp://localhost\");\n    }\n\n    writeMessage (msg) {\n        Data.addOneItem(msg);\n        this.amqp.then(function(conn) {\n            return conn.createChannel();\n        }).then(function(channel) {\n            return channel.assertQueue(Data.targetQueue()).then(function() {\n                channel.sendToQueue(Data.targetQueue(), new Buffer.from(JSON.stringify(msg)), { correlationId: msg.uuid });\n                console.log(\" [x] Sent %s\", msg.uuid);\n                return Data.setStatus(msg.id, true);\n            });\n        });\n    }\n    \n    receiveMessage () {\n        this.amqp.then(function(conn) {\n            return conn.createChannel();\n        }).then(function(channel) {\n            return channel.assertQueue(Data.listenQueue()).then(function() {\n                channel.consume(Data.listenQueue(), function(msg) {\n                    var msgContent = JSON.parse(msg.content.toString());\n                    console.log(\" [!] Message Payload : %s\", msgContent.payload);\n                    console.log(\" [!] Message Task id : %s\", msgContent.taskid);\n                    console.log(\" [!] Message Server  : %s\", msgContent.sysid);\n                    console.log(\" [!] Message rel. ID : %s\", msg.properties.correlationId.toString());\n                    console.log();\n                    return Data.setResult(msgContent);\n                }, { noAck: true });\n            });\n        });\n    }\n}\n\n/** App\n * The REST API.\n */\nclass App {\n    constructor (port) {\n        const express = require(\"express\");\n        const bodyParser = require(\"body-parser\");\n        this.app = express();\n        this.app.use(bodyParser.json());\n        this.app.listen(port);\n        console.log(\" [!] Waiting for messages via HTTP API @ Port %s. To exit press CTRL+C\", port);\n    }\n\n    start () {\n        const rabbit = new Rabbit();\n        rabbit.receiveMessage();\n\n        this.app.get(\"/clear\", function(req, res) {\n            Data.reset();            \n            res.json(Data.db());\n        });\n\n        this.app.get(\"/history\", function(req, res){\n            res.json(Data.db());\n        });\n\n        this.app.get(\"/history/:id\", function(req, res){\n            res.json(Data.getOneItem(req.params.id));\n        });\n\n        this.app.post(\"/send\", function(req, res){\n            var task = req.body.task;\n            var payload = req.body.payload;\n            var message = { id: database.counter, task: task, payload: payload, uuid: Data.uuid() , sent: false, result: {}};\n\n            res.json(message);\n            rabbit.writeMessage(message);\n            database.counter++;\n        });\n    }\n}\n\nconst app = new App(port);\napp.start();\n"]}