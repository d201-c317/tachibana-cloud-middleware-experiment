{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["\n\n\"use strict\";\n\nvar database = { counter: 0, data: [] };\nconst port = process.env.PORT || 3000;\nconst AMQP = require(\"amqplib\");\nconst AURI = \"amqp://localhost\";\n\n/**\n * Data\n * To Access the imaginary JSON based database and some global data. It could be replaced by MongoDB.\n */\nclass Data {\n    static db() { return database; } // Get Full DB\n    static getOneItem(id) { return database.data[id]; } // Get One item in DB\n    static addOneItem(object) { database.data[object.id] = object; } // Add ONe Item in DB\n    static setResult(object) { database.data[object.seq].result = object; } // Set Processed Result\n    static setStatus(id, value) { database.data[id].sent = value; } // Set Delivery Status\n    static reset() { database = { counter: 0, data: [] }; } // Clean the Database\n    static uuid() { return require(\"node-uuid\").v1(); } // generate UUID\n    static targetQueue() { return \"in\"; } // get Queue Name\n    static listenQueue() { return \"out\"; } // Same.\n}\n\n/**\n * AMQP\n * Don't Touch.\n */\nclass Rabbit {\n    static writeMessage(msg) {\n        Data.addOneItem(msg);\n        AMQP.connect(AURI).then(function(conn) {\n            return conn.createChannel().then(function(ch) {\n                const q = ch.assertQueue(Data.targetQueue());\n                return q.then(function() {\n                    ch.sendToQueue(Data.targetQueue(), new Buffer.from(JSON.stringify(msg)), { correlationId: msg.uuid });\n                    console.log(\" [x] SENT @ %s\", msg.uuid);\n                    Data.setStatus(msg.id, true);\n                    return ch.close();\n                });\n            }).finally(function() {\n                conn.close();\n            });\n        }).catch(console.warn);\n    }\n\n    static receiveMessage() {\n        AMQP.connect(AURI).then(function(conn) {\n            process.once(\"SIGINT\", function() {\n                conn.close();\n            });\n            return conn.createChannel().then(function(ch) {\n                var q = ch.assertQueue(Data.listenQueue());\n\n                q = q.then(function() {\n                    ch.consume(Data.listenQueue(), function(msg) {\n                        var msgContent = JSON.parse(msg.content.toString());\n                        console.log(\" [*] RECV @ %s\", msg.properties.correlationId.toString());\n                        return Data.setResult(msgContent);\n                    }, { noAck: true });\n                });\n\n                return q.then(function() {\n                    console.log(\" [!] Waiting for messages via HTTP API @ Port %s. To exit press CTRL+C\", port);\n                });\n            });\n        }).catch(console.warn);\n    }\n}\n\n/** App\n * The REST API.\n */\nclass App {\n    constructor(port) {\n        const express = require(\"express\");\n        const bodyParser = require(\"body-parser\");\n        this.app = express();\n        this.app.use(bodyParser.json());\n        this.app.listen(port);\n    }\n\n    start() {\n        Rabbit.receiveMessage();\n\n        this.app.get(\"/clear\", function(req, res) {\n            Data.reset();\n            res.json(Data.db());\n        });\n\n        this.app.get(\"/history\", function(req, res) {\n            res.json(Data.db());\n        });\n\n        this.app.get(\"/history/:id\", function(req, res) {\n            res.json(Data.getOneItem(req.params.id));\n        });\n\n        this.app.post(\"/send\", function(req, res) {\n            var task = req.body.task;\n            var payload = req.body.payload;\n            var message = { id: database.counter, task: task, payload: payload, uuid: Data.uuid(), sent: false, result: {} };\n\n            res.json(message);\n            Rabbit.writeMessage(message);\n            database.counter++;\n        });\n    }\n}\n\nconst app = new App(port);\napp.start();"]}