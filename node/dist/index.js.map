{"version":3,"sources":["../index.js"],"names":["database","counter","data","port","process","env","PORT","Data","id","object","seq","result","value","sent","Tool","require","v1","Rabbit","AMQP","AURI","AMQP_URI","target","listen","msg","addOneItem","connect","then","conn","createChannel","ch","q","assertQueue","sendToQueue","Buffer","from","JSON","stringify","correlationId","uuid","console","log","setStatus","close","finally","catch","warn","once","consume","msgContent","parse","content","toString","properties","setResult","noAck","App","express","bodyParser","app","use","json","rabbit","receiveMessage","get","req","res","reset","db","getOneItem","params","post","task","body","payload","message","writeMessage","start"],"mappings":"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","file":"index.js","sourcesContent":["\n\n\"use strict\";\n\nvar database = { counter: 0, data: [] };\nconst port = process.env.PORT || 3000;\n\n/**\n * Database Emulation\n * \n * @class Data\n */\nclass Data {\n    /**\n     * Get Database\n     * \n     * @static\n     * @returns database\n     * \n     * @memberOf Data\n     */\n    static db() {\n        return database;\n    }\n\n    /**\n     * Get one item from database\n     * \n     * @static\n     * @param {number} id job sequence\n     * @returns database item\n     * \n     * @memberOf Data\n     */\n    static getOneItem(id) {\n        return database.data[id];\n    }\n\n    /**\n     * Add one job to database\n     * \n     * @static\n     * @param {any} object Job object\n     * @returns {void}\n     * @memberOf Data\n     */\n    static addOneItem(object) {\n        database.data[object.id] = object;\n    }\n\n    /**\n     * Store the result of the job.\n     * \n     * @static\n     * @param {any} object Result object\n     * \n     * @memberOf Data\n     */\n    static setResult(object) {\n        database.data[object.seq].result = object;\n    }\n\n    /**\n     * Set the delivery status of the item.\n     * \n     * @static\n     * @param {number} id Job seq\n     * @param {any} value Delivery status\n     * @returns {void}\n     * @memberOf Data\n     */\n    static setStatus(id, value) {\n        database.data[id].sent = value;\n    }\n\n    /**\n     * Clear the Database\n     * \n     * @static\n     * @returns {void}\n     * @memberOf Data\n     */\n    static reset() {\n        database = { counter: 0, data: [] };\n    }\n}\n\n/**\n * Common Tools\n * \n * @class Tool\n */\nclass Tool {\n    /**\n     * UUID Generator\n     * \n     * @static\n     * @returns {string} UUID\n     * \n     * @memberOf Tool\n     */\n    static uuid() {\n        return require(\"node-uuid\").v1();\n    }\n}\n\n/**\n * AMQP Access\n * \n * @class Rabbit\n */\nclass Rabbit {\n    /**\n     * Creates an instance of Rabbit.\n     * \n     * @returns {void}\n     * @memberOf Rabbit\n     */\n    constructor() {\n        this.AMQP = require(\"amqplib\");\n        this.AURI = process.env.AMQP_URI || \"amqp://localhost\";\n        this.target = \"in\";\n        this.listen = \"out\";\n    }\n\n    /**\n     * Publish message\n     * \n     * @param {any} msg message object\n     * @returns {void}\n     * @memberOf Rabbit\n     */\n    writeMessage(msg) {\n        const target = this.target;\n        Data.addOneItem(msg);\n        this.AMQP.connect(this.AURI).then(function(conn) {\n            return conn.createChannel().then(function(ch) {\n                const q = ch.assertQueue(target);\n                return q.then(function() {\n                    ch.sendToQueue(target, new Buffer.from(JSON.stringify(msg)), { correlationId: msg.uuid });\n                    console.log(\" [x] SENT @ %s\", msg.uuid);\n                    Data.setStatus(msg.id, true);\n                    return ch.close();\n                });\n            }).finally(function() {\n                conn.close();\n            });\n        }).catch(console.warn);\n    }\n\n    /**\n     * message receiver\n     * \n     * @returns {void}\n     * @memberOf Rabbit\n     */\n    receiveMessage() {\n        const listen = this.listen;\n        this.AMQP.connect(this.AURI).then(function(conn) {\n            process.once(\"SIGINT\", function() {\n                conn.close();\n            });\n            return conn.createChannel().then(function(ch) {\n                let q = ch.assertQueue(listen);\n                q = q.then(function() {\n                    ch.consume(listen, function(msg) {\n                        let msgContent = JSON.parse(msg.content.toString());\n                        console.log(\" [*] RECV @ %s\", msg.properties.correlationId.toString());\n                        return Data.setResult(msgContent);\n                    }, { noAck: true });\n                });\n                return q.then(function() {\n                    console.log(\" [!] Waiting for messages via HTTP API @ Port %s. To exit press CTRL+C\", port);\n                });\n            });\n        }).catch(console.warn);\n    }\n}\n\n/**\n * The API Core\n * \n * @class App\n */\nclass App {\n    /**\n     * Creates an instance of API.\n     * \n     * @param {number} port Port No.\n     * \n     * @memberOf App\n     */\n    constructor(port) {\n        const express = require(\"express\");\n        const bodyParser = require(\"body-parser\");\n        this.app = express();\n        this.app.use(bodyParser.json());\n        this.app.listen(port);\n    }\n\n    /**\n     * Start the API\n     * \n     * \n     * @memberOf App\n     */\n    start() {\n        const rabbit = new Rabbit();\n        rabbit.receiveMessage();\n\n        /**\n         * GET /clear\n         * Empty the database.\n         */\n        this.app.get(\"/clear\", function(req, res) {\n            Data.reset();\n            res.json(Data.db());\n        });\n\n        /**\n         * GET /history\n         * Get the list of jobs.\n         */\n        this.app.get(\"/history\", function(req, res) {\n            res.json(Data.db());\n        });\n\n        /** \n         * GET /history/:id\n         * Get the details of specific job \n         * @param {number} id The job seq\n         */\n        this.app.get(\"/history/:id\", function(req, res) {\n            res.json(Data.getOneItem(req.params.id));\n        });\n\n        /**\n         * POST /send\n         * Entry point of Job\n         * @param {string} task The task\n         * @param {string} payload The task payload\n         */\n        this.app.post(\"/send\", function(req, res) {\n            let task = req.body.task;\n            let payload = req.body.payload;\n            let message = { id: database.counter, task: task, payload: payload, uuid: Tool.uuid(), sent: false, result: {} };\n\n            res.json(message);\n            rabbit.writeMessage(message);\n            database.counter++;\n        });\n    }\n}\n\nconst app = new App(port);\napp.start();"]}